import { NextResponse } from 'next/server';
import { writeFile, mkdir } from 'fs/promises';
import { existsSync } from 'fs';
import path from 'path';

// CORS headers ƒë·ªÉ cho ph√©p cross-origin requests
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

// X·ª≠ l√Ω preflight OPTIONS request
export async function OPTIONS(request) {
  return new Response(null, {
    status: 200,
    headers: corsHeaders,
  });
}

// H√†m n√†y x·ª≠ l√Ω c√°c y√™u c·∫ßu POST ƒë·∫øn /api/log-submission
export async function POST(request) {
  try {
    // ƒê·ªçc v√† ph√¢n t√≠ch d·ªØ li·ªáu JSON t·ª´ body c·ªßa y√™u c·∫ßu
    const submissionData = await request.json();

    // T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    const logsDir = path.join(process.cwd(), 'logs');
    if (!existsSync(logsDir)) {
      await mkdir(logsDir, { recursive: true });
    }

    // T·∫°o t√™n file log theo ng√†y
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const logFileName = `quiz-submissions-${today}.log`;
    const logFilePath = path.join(logsDir, logFileName);

    // T·∫°o n·ªôi dung log
    const logEntry = {
      timestamp: new Date().toISOString(),
      studentName: submissionData.studentName,
      studentClass: submissionData.studentClass, // Th√™m l·ªõp c·ªßa h·ªçc sinh
      submittedAt: submissionData.submittedAt,
      score: submissionData.score,
      answers: submissionData.answers
    };

    const logLine = JSON.stringify(logEntry) + '\n';

    // Ghi v√†o file log
    await writeFile(logFilePath, logLine, { flag: 'a' }); // 'a' ƒë·ªÉ append

    // In d·ªØ li·ªáu ra console c·ªßa server m·ªôt c√°ch r√µ r√†ng (v·∫´n gi·ªØ ƒë·ªÉ debug)
    console.log('\n=============================================');
    console.log('‚úÖ B√ÄI L√ÄM M·ªöI V·ª™A ƒê∆Ø·ª¢C N·ªòP');
    console.log('=============================================');
    console.log(`üë®‚Äçüéì H·ªçc sinh: ${submissionData.studentName}`);
    console.log(`üóìÔ∏è Th·ªùi gian n·ªôp: ${submissionData.submittedAt}`);
    console.log(`üíØ ƒêi·ªÉm tr·∫Øc nghi·ªám: ${submissionData.score}`);
    console.log(`üìÅ ƒê√£ l∆∞u v√†o file: ${logFilePath}`);
    console.log('---------- CHI TI·∫æT C√ÇU TR·∫¢ L·ªúI ----------');
    // In chi ti·∫øt c√°c c√¢u tr·∫£ l·ªùi ƒë·ªÉ d·ªÖ theo d√µi
    console.log(JSON.stringify(submissionData.answers, null, 2));
    console.log('=============================================\n');

    // Tr·∫£ v·ªÅ m·ªôt ph·∫£n h·ªìi th√†nh c√¥ng cho tr√¨nh duy·ªát c·ªßa h·ªçc sinh
    return NextResponse.json(
      { message: 'Submission logged successfully', logFile: logFileName }, 
      { 
        status: 200,
        headers: corsHeaders
      }
    );

  } catch (error) {
    // N·∫øu c√≥ l·ªói x·∫£y ra (v√≠ d·ª•: d·ªØ li·ªáu kh√¥ng ph·∫£i JSON)
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω b√†i l√†m:', error);

    // Tr·∫£ v·ªÅ m·ªôt ph·∫£n h·ªìi l·ªói
    return NextResponse.json(
      { message: 'Error logging submission', error: error.message }, 
      { 
        status: 500,
        headers: corsHeaders
      }
    );
  }
}
